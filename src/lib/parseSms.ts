import { Transaction } from './db';

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
const categories: { key: string; value: string }[] = [
  { key: 'Taxi', value: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç' },
  { key: 'PAYME', value: '–ü–µ—Ä–µ–≤–æ–¥—ã' },
  { key: 'P2P', value: '–ü–µ—Ä–µ–≤–æ–¥—ã' },
  { key: 'ZOOMRAD', value: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' },
  { key: 'UB OPL', value: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç' },
  { key: 'HUMO', value: '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏' },
  { key: 'TASHKENT', value: '–ì–æ—Ä–æ–¥' },
  // ... –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å
];

export function parseSmsToTransaction(sms: string): Omit<Transaction, 'id'> | Omit<Transaction, 'id'>[] | null {
  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —É—Å—Ç–æ–π—á–∏–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –±–∞–ª–∞–Ω—Å–∞ –ø–æ –≤—Å–µ–º –∫–∞—Ä—Ç–∞–º
  // –ò—â–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –≤–∏–¥–∞: 'üîπ ...*XXXX ...\n...üíµ ... UZS' (–ª—é–±—ã–µ –ø—Ä–æ–±–µ–ª—ã, –ø–µ—Ä–µ–Ω–æ—Å—ã, —Ç–∞–±—ã)
  const cleaned = sms.replace(/\r/g, '').replace(/[\t ]+/g, ' ').replace(/ +\n/g, '\n').replace(/\n{2,}/g, '\n');
  const balanceBlockRegex = /üîπ\s*([\w–ê-–Ø–Å–∞-—è—ë'.,\- ]*\*\d{4})\s*\n?\s*üíµ\s*([\d'., ]+)\s*UZS/igm;
  const txs: Omit<Transaction, 'id'>[] = [];
  let match;
  while ((match = balanceBlockRegex.exec(cleaned)) !== null) {
    const card = match[1].replace(/\s+/g, ' ').trim();
    const balanceAfter = parseFloat(match[2].replace(/[' .]/g, '').replace(',', '.'));
    txs.push({
      card,
      amount: 0,
      currency: 'UZS',
      type: 'change',
      timestamp: new Date().toISOString(),
      merchant: '',
      category: '',
      balanceAfter,
      raw: sms,
    });
  }
  if (txs.length) return txs;

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ HUMOcardbot
  // 1. –û–ø–ª–∞—Ç–∞/–û–ø–µ—Ä–∞—Ü–∏—è (—Ä–∞—Å—Ö–æ–¥)
  // 2. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (–¥–æ—Ö–æ–¥)
  // 3. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

  // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
  const text = sms.replace(/\r?\n/g, '\n').trim();

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
  let type: 'income' | 'expense' | 'change' = 'expense';
  if (/üéâ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ|\+/.test(text)) type = 'income';
  if (/–°—á–µ—Ç –ø–æ –∫–∞—Ä—Ç–µ –∏–∑–º–µ–Ω–µ–Ω|–∏–∑–º–µ–Ω–µ–Ω/i.test(text)) type = 'change';

  // –°—É–º–º–∞ –∏ –≤–∞–ª—é—Ç–∞
  let amountMatch = text.match(/[‚ûñ‚ûïüí∏] ?([\d., ]+)\s*([A-Z]{3})/);
  let amount = amountMatch ? parseFloat(amountMatch[1].replace(/\s|\./g, '').replace(',', '.')) : null;
  let currency = amountMatch ? amountMatch[2] : '';

  // –ö–∞—Ä—Ç–∞ (–º–∞—Å–∫–∞)
  let cardMatch = text.match(/HUMO-?CARD \*?(\d{4})/i);
  if (!cardMatch) cardMatch = text.match(/HUMOCARD \*?(\d{4})/i);
  let card = cardMatch ? `HUMOCARD *${cardMatch[1]}` : '';

  // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
  let dateMatch = text.match(/(\d{2}:[0-5]\d) (\d{2}\.\d{2}\.\d{4})/);
  let timestamp = dateMatch ? `${dateMatch[2]}T${dateMatch[1]}:00` : '';

  // –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  let balanceMatch = text.match(/üí∞ ([\d., ]+) UZS/);
  let balanceAfter = balanceMatch ? parseFloat(balanceMatch[1].replace(/\s|\./g, '').replace(',', '.')) : null;

  // –ú–µ—Å—Ç–æ/–æ–ø–∏—Å–∞–Ω–∏–µ
  let merchantMatch = text.match(/üìç ([^\n]+)/);
  let merchant = merchantMatch ? merchantMatch[1].trim() : '';

  // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  let category = '';
  if (type === 'income' && merchant.toLowerCase().includes('p2p')) {
    category = '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ';
  } else {
    for (const c of categories) {
      if (merchant.toLowerCase().includes(c.key.toLowerCase())) {
        category = c.value;
        break;
      }
    }
  }

  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ ‚Äî –≤–µ—Ä–Ω—É—Ç—å null
  if (!amount || !currency || !card || !timestamp) return null;

  return {
    card,
    amount,
    currency,
    type,
    timestamp,
    merchant,
    category,
    balanceAfter,
    raw: sms,
  };
}
